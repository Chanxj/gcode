package ${packageName};

import org.alvin.code.jdbc.annotations.JDBCTransction;
import org.alvin.code.jdbc.beans.Page;
import org.alvin.mini_inject.annotations.MiniComponent;
import org.alvin.mini_inject.annotations.MiniInject;

import java.sql.SQLException;
import java.util.List;

/**
* @类说明: ${entity.labelName}--数据逻辑层
* @author: ${auth}
* @date : ${time}
**/
@MiniComponent
public class ${entity.var.upperCamel}Service {


    @MiniInject
    private ${entity.var.upperCamel}Dao dao; //注入[${entity.labelName}]数据访问层

    /**
     * @方法说明： 新增[${entity.labelName}]记录
     */
    @JDBCTransction
    public int save(${entity.var.upperCamel} vo) throws SQLException {
        return this.dao.save(vo);
    }

    /**
     * @方法说明： 新增[${entity.labelName}]记录
     */
    @JDBCTransction
    public int[] batchSave(List<${entity.var.upperCamel}> list) throws SQLException {
        return this.dao.insertBatch(list);
    }

    /**
     * @方法说明： 删除[${entity.labelName}]记录(多条)
     */
    @JDBCTransction
    public int delete(${entity.var.id.allTypeName} [] ids) throws SQLException {
		//return this.dao.deleteLogic(ids);//逻辑删除
        return this.dao.delete(ids);//物理删除
    }

    /**
     * @方法说明： 更新[${entity.labelName}]记录
     */
    @JDBCTransction
    public int update(${entity.var.upperCamel} vo) throws SQLException {
        return this.dao.update(vo);
    }

    /**
     * @方法说明：更新[${entity.labelName}]记录,不为空的都更新掉
     */
    @JDBCTransction
    public int updateNotNull(${entity.var.upperCamel} vo) throws SQLException {
        return this.dao.updateNotNull(vo);
    }

    /**
     * @方法说明： 按条件查询分页[${entity.labelName}]列表
     */
    public Page<${entity.var.upperCamel}> queryPage(${entity.var.upperCamel}Cond cond) throws SQLException {
        cond.getOrder().put("t.${entity.var.id.colName}", "desc");
        return dao.queryPage(cond);
    }

    /**
     * @方法说明： 按条件查询不分页[${entity.labelName}]列表(使用范型)
     */
    public List<${entity.var.upperCamel}> queryList(${entity.var.upperCamel}Cond cond) throws SQLException {
        cond.getOrder().put("t.${entity.var.id.colName}", "desc");
        return dao.queryList(cond);
    }

    /**
     * @方法说明： 按条件查询一个 [${entity.labelName}] 对象
     */
    public ${entity.var.upperCamel} findOne(${entity.var.upperCamel}Cond cond) throws SQLException {
        cond.getOrder().put("t.${entity.var.id.colName}", "desc");
        return dao.findOne(cond);
    }

    /**
     * @方法说明： 按ID查找单个[${entity.labelName}]记录
     */
    public ${entity.var.upperCamel} findById(${entity.var.id.allTypeName} id) throws SQLException {
        return dao.findById(id);
    }

    /**
     * @方法说明： 按条件查询[${entity.labelName}]记录个数
     */
    public long queryCount(${entity.var.upperCamel}Cond cond) throws SQLException {
        return dao.queryCount(cond);
    }
}