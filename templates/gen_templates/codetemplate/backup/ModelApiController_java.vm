package ${pName};

import java.security.Principal;
import java.util.List;
import org.alvin.code.gen.utils.Page;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import io.swagger.annotations.*;
import org.alvin.code.gen.beans.RestfullResp;
import lombok.extern.slf4j.Slf4j;

/**
* @类说明: "[${cName}]app端Swagger控制器类"
* @author: ${auth}
* @date : ${time}
**/
@Slf4j
@RestController
@RequestMapping("/api/${lowUpp}")
@Api(value = "[${cName}]控制器", description = "[${cName}]相关操作")
public class ${clsUpp}ApiController  {
	
    @Autowired
	private ${clsUpp}Service service; //注入[${cName}]业务逻辑类

    /**
     * @方法说明：  新增[${cName}]记录
     */
    @ApiOperation(value = "新增[${cName}]", notes = "返回影响记录行数")
	@ApiResponses({
            @ApiResponse(code = 0, message = "请求成功"),
            @ApiResponse(code = 500, message = "系统错误!"),
            @ApiResponse(code = -1, message = "TOKEN未授权或已过期!")
    })
    @ApiImplicitParams(
    {
        #foreach($fi in $fList)

            @ApiImplicitParam(name = "${fi.name}", value = "${fi.comment}", paramType = "query", dataType="${fi.type}"),
        #end

		@ApiImplicitParam(name = "Access-Token", value = "登录令牌", paramType = "header", dataType = "string")
    })

    @PostMapping("save")
	public RestfullResp<Integer> save( ${clsUpp} ${lowUpp}, Principal principal) {
    		return new RestfullResp<>(service.save(${lowUpp}));
    	}
    

    /**
    * @方法说明： 删除[${cName}]记录
    */
    @ApiOperation(value = "删除[${cName}]", notes = "返回影响记录行数")
	@ApiResponses({
            @ApiResponse(code = 0, message = "请求成功"),
            @ApiResponse(code = 500, message = "系统错误!"),
            @ApiResponse(code = -1, message = "TOKEN未授权或已过期!")
    })
    @ApiImplicitParams(
    {
        @ApiImplicitParam(name = "id", value = "[${cName}]的主键", required = true, dataType = "${idType}", paramType = "query"),
		@ApiImplicitParam(name = "Access-Token", value = "登录令牌", paramType = "header", dataType = "string")
    })
    @PostMapping( "delete" )
    public RestfullResp<Integer> delete(@RequestParam("id") ${idType} id) {
            return new RestfullResp<>(service.delete(new ${idType}[] { id }));
        }

    /**
    * @方法说明： 修改[${cName}]记录
    */
    @ApiOperation(value = "修改[${cName}]", notes = "返回影响记录行数")
		@ApiResponses({
            @ApiResponse(code = 0, message = "请求成功"),
            @ApiResponse(code = 500, message = "系统错误!"),
            @ApiResponse(code = -1, message = "TOKEN未授权或已过期!")
    })
    @ApiImplicitParams(
    {
        #foreach($fi in $fList)

            @ApiImplicitParam(name = "${fi.name}", value = "${fi.comment}", paramType = "query", dataType="${fi.type}"),
        #end

		@ApiImplicitParam(name = "Access-Token", value = "登录令牌", paramType = "header", dataType = "string")
    })
    @PostMapping("update")
    public RestfullResp<Integer> update( ${clsUpp} ${lowUpp}, Principal principal) {
        return new RestfullResp<>(service.update(${lowUpp}));
    }
	
	/**
    * @方法说明： 修改[${cName}]记录
    */
    @ApiOperation(value = "修改[${cName}]", notes = "返回影响记录行数")
		@ApiResponses({
            @ApiResponse(code = 0, message = "请求成功"),
            @ApiResponse(code = 500, message = "系统错误!"),
            @ApiResponse(code = -1, message = "TOKEN未授权或已过期!")
    })
    @ApiImplicitParams(
    {
        #foreach($fi in $fList)

            @ApiImplicitParam(name = "${fi.name}", value = "${fi.comment}", paramType = "query", dataType="${fi.type}"),
        #end

		@ApiImplicitParam(name = "Access-Token", value = "登录令牌", paramType = "header", dataType = "string")
    })
    @PostMapping("updateNotNull")
    public RestfullResp<Integer> updateNotNull( ${clsUpp} ${lowUpp}, Principal principal) {
        return new RestfullResp<>(service.updateNotNull(${lowUpp}));
    }

    /**
    * @方法说明： 按条件查询分页[${cName}]列表  
    */
    @ApiOperation(value = "按条件查询分页[${cName}]列表", notes = "返回分页[${cName}]列表")
		@ApiResponses({
            @ApiResponse(code = 0, message = "请求成功"),
            @ApiResponse(code = 500, message = "系统错误!"),
            @ApiResponse(code = -1, message = "TOKEN未授权或已过期!")
    })
    @ApiImplicitParams(
    {
        #foreach($fi in $fList)

            @ApiImplicitParam(name = "${fi.name}", value = "${fi.comment}", paramType = "query", dataType="${fi.type}"),
        #end

		@ApiImplicitParam(name = "Access-Token", value = "登录令牌", paramType = "header", dataType = "string")
    })
    @PostMapping( "queryPage")
    public RestfullResp<Page<${clsUpp}>> queryPage( ${clsUpp}Cond cond, Principal principal) {
        // cond.setBranch_id(getSessionBranchId(principal));
        return new RestfullResp<>(service.queryPage(cond));
    }

    /**
    * @方法说明： 按条件查询不分页[${cName}]列表
    */
    @ApiOperation(value = "按条件查询不分页[${cName}]列表", notes = "返回不分页[${cName}]列表")
		@ApiResponses({
            @ApiResponse(code = 0, message = "请求成功"),
            @ApiResponse(code = 500, message = "系统错误!"),
            @ApiResponse(code = -1, message = "TOKEN未授权或已过期!")
    })
    @ApiImplicitParams(
    {
        #foreach($fi in $fList)

            @ApiImplicitParam(name = "${fi.name}", value = "${fi.comment}", paramType = "query", dataType="${fi.type}"),
        #end
        
		@ApiImplicitParam(name = "Access-Token", value = "登录令牌", paramType = "header", dataType = "string")
    })
	@PostMapping("queryList")
    public RestfullResp<List<${clsUpp}>> queryList( ${clsUpp}Cond cond, Principal principal) {
            // cond.setBranch_id(getSessionBranchId(principal));
    		return new RestfullResp<>(service.queryList(cond));
    }
	
	 /**
    * @方法说明： 按条件查询一个 ${cName} 对象
    */
    @ApiOperation(value = "按条件查询一个 ${cName} 对象", notes = "返回${cName} 对象")
		@ApiResponses({
            @ApiResponse(code = 0, message = "请求成功"),
            @ApiResponse(code = 500, message = "系统错误!"),
            @ApiResponse(code = -1, message = "TOKEN未授权或已过期!")
    })
    @ApiImplicitParams(
    {
        #foreach($fi in $fList)

            @ApiImplicitParam(name = "${fi.name}", value = "${fi.comment}", paramType = "query", dataType="${fi.type}"),
        #end
        
		@ApiImplicitParam(name = "Access-Token", value = "登录令牌", paramType = "header", dataType = "string")
    })
	@PostMapping("findOne")
    public RestfullResp<${clsUpp}> findOne( ${clsUpp}Cond cond, Principal principal) {
            // cond.setBranch_id(getSessionBranchId(principal));
    		return new RestfullResp<>(service.findOne(cond));
    }
            
    /**
    * @方法说明： 按条件查询[${cName}]记录个数
    */
    @ApiOperation(value = "按条件查询[${cName}]记录个数", notes = "返回记录个数")
		@ApiResponses({
            @ApiResponse(code = 0, message = "请求成功"),
            @ApiResponse(code = 500, message = "系统错误!"),
            @ApiResponse(code = -1, message = "TOKEN未授权或已过期!")
    })
    @ApiImplicitParams(
    {
        #foreach($fi in $fList)
            @ApiImplicitParam(name = "${fi.name}", value = "${fi.comment}", paramType = "query", dataType="${fi.type}"),
        #end
		@ApiImplicitParam(name = "Access-Token", value = "登录令牌", paramType = "header", dataType = "string")
    })
	@PostMapping( "queryCount")
	public RestfullResp<Long> queryCount( ${clsUpp}Cond cond) {
		return new RestfullResp<>(service.queryCount(cond));
	}
                
    /**
    * @方法说明： 按主键查询单条[${cName}]记录
    */
    @ApiOperation(value = "按主键查询单个[${cName}]记录", notes = "返回单个[${cName}]对象")
		@ApiResponses({
            @ApiResponse(code = 0, message = "请求成功"),
            @ApiResponse(code = 500, message = "系统错误!"),
            @ApiResponse(code = -1, message = "TOKEN未授权或已过期!")
    })
    @ApiImplicitParams({ 
	@ApiImplicitParam(name = "id", value = "[${cName}]的主键", required = true, dataType = "${idType}", paramType = "query"),
	@ApiImplicitParam(name = "Access-Token", value = "登录令牌", paramType = "header", dataType = "string")
 })
    @PostMapping( "findById")
    public RestfullResp<${clsUpp}> findById(@RequestParam("id") ${idType} id) {
    		return new RestfullResp<>(service.findById(id));
    	}
}

