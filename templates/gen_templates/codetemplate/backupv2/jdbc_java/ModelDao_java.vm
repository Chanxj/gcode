package ${pName};

import com.google.common.base.Joiner;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import org.alvin.code.jdbc.JDBCBaseDao;
import org.alvin.code.jdbc.beans.Page;
import org.alvin.code.jdbc.utils.SqlUtil;
import org.alvin.mini_inject.annotations.MiniComponent;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
* @类说明: ${cName}--数据逻辑层
* @author: ${auth}
* @date : ${time}
**/
@MiniComponent
public class ${clsUpp}Dao extends JDBCBaseDao {

    /**
     * @方法说明： 新增${cName}记录
     */
    public int save(${clsUpp} vo) throws SQLException {
        StringBuilder sql = new StringBuilder();
        sql.append("INSERT INTO ${tName} (${insertFields}) ");
        sql.append(" VALUES (${insertValuesFields})");
        Object[] params ={ ${paramsFieldsV2} };
        System.out.println(SqlUtil.showSql(sql.toString(), params));//显示SQL语句
        return this.update(sql.toString(), params);
    }

    /**
     * @方法说明：批量插入${cName}记录
     */
    public int[] insertBatch(List<${clsUpp}> list) throws SQLException {
        StringBuilder sql = new StringBuilder();
        sql.append("INSERT INTO ${tName} (${insertFields}) ");
        sql.append(" VALUES (${insertValuesFields})");
        List<Object[]> params = list.stream().map(vo -> {
            Object[] p = {${paramsFieldsV2}};
            return p;
        }).collect(Collectors.toList());
        return this.update(sql.toString(), params);
    }

    /**
     * @方法说明：物理删除${cName}记录(多条)
     */
    public int delete(${id.allTypeName} ids[]) throws SQLException {
        String sql = "DELETE FROM ${tName} WHERE ${id.name} " + SqlUtil.ArrayToIn(ids);
        return this.update(sql);
    }

    /**
     * @方法说明：更新${cName}记录
     */
    public int update(${clsUpp} vo) throws SQLException {
       StringBuilder sql = new StringBuilder();
        sql.append("UPDATE ${tName} SET ${updateFields} ");
        sql.append(" WHERE ${id.name}=? ");
        Object[] params = {${updateParamsV2}};
        return this.update(sql.toString(), params);
    }


    /**
     * @方法说明：更新${cName}记录,不为空的都更新掉
     */
    public int updateNotNull(${clsUpp} vo) throws SQLException {
        List<String> fields = new ArrayList<>();
        List<Object> values = new ArrayList<>();
        #foreach ($fie in $fList)
        #if ($fie.name == ${idName})
        	#set($idGetName = 'vo.get' + $fie.bigName + '()')        
        #end
        #if ($fie.name != ${idName})

        if(vo.get${fie.upper_camel}() != null){
        	fields.add(" ${fie.name} = ? ");
        	values.add(vo.get${fie.upper_camel}());
        }	
        #end
        #end
        
        if(fields.isEmpty()){
        	return 0;
        }
        StringBuilder sql = new StringBuilder();
        sql.append("UPDATE ${tName} SET ");
        sql.append(Joiner.on(",").join(fields));
        sql.append(" WHERE ${idName}=? ");
        values.add(${idGetName});
        Object[] params = {values.toArray()};
        return this.update(sql.toString(), params);
    }

    /**
     * @方法说明：按条件查询分页${cName}列表
     */
    public Page<${clsUpp}> queryPage(${clsUpp}Cond cond) throws SQLException {
        StringBuilder sb = new StringBuilder("SELECT ");
        sb.append(" ${selectItems} ");
        sb.append(" FROM ${tName} t ");
        sb.append(" WHERE 1=1 ");
        sb.append(cond.getCondition());
        sb.append(cond.getOrderSql());//增加排序子句;
		System.out.println(SqlUtil.showSql(sb.toString(), cond.getArray()));//显示SQL语句
        return queryPage(sb.toString(), cond, ${clsUpp}.class);
    }

    /**
     * @方法说明：按条件查询不分页${cName}列表
     */
    public List<${clsUpp}> queryList(${clsUpp}Cond cond) throws SQLException {
        StringBuilder sb = new StringBuilder("SELECT ");
        sb.append(" ${selectItems} ");
        sb.append(" FROM ${tName} t ");
        sb.append(" WHERE 1=1 ");
        sb.append(cond.getCondition());
        sb.append(cond.getOrderSql());//增加排序子句;
		System.out.println(SqlUtil.showSql(sb.toString(), cond.getArray()));//显示SQL语句
        return this.queryList(sb.toString(), cond, ${clsUpp}.class);
    }

    /**
     * @方法说明：按条件查询一个${cName}对象
     */
    public ${clsUpp} findOne(${clsUpp}Cond cond) throws SQLException {
        StringBuilder sb = new StringBuilder("SELECT ");
        sb.append(" ${selectItems} ");
        sb.append(" FROM ${tName} t ");
        sb.append(" WHERE 1=1 ");
        sb.append(cond.getCondition());
        sb.append(" limit 0,1");
        return this.findOne(sb.toString(), cond.getArray(), ${clsUpp}.class);
    }

    /**
     * @方法说明：按ID查找单个${cName}实体
     */
    public ${clsUpp} findById(${id.allTypeName} id) throws SQLException {
        StringBuilder sb = new StringBuilder("SELECT ");
        sb.append(" ${selectItems} ");
        sb.append(" FROM ${tName} t ");
        sb.append(" WHERE 1=1 ");
        sb.append(" AND t.${id.name}=?");
        return this.findOne(sb.toString(), new Object[]{id}, ${clsUpp}.class);
    }

    /**
     * @方法说明：按条件查询${cName}记录个数
     */
    public long queryCount(${clsUpp}Cond cond) throws SQLException {
        String countSql = "SELECT COUNT(1) FROM ${tName} t WHERE 1=1 " + cond.getCondition();
        return this.findCell(countSql, cond.getArray(), Long.class);
    }

    /**
     * @方法说明：按条件查询收寄信息记录个数
     */
    public int deleteLogic(${id.allTypeName} ids[]) throws SQLException {
        String sql = "UPDATE ${tName} SET status=? WHERE ${id.name}" + SqlUtil.ArrayToIn(ids);
        return this.update(sql, new Object[]{-1});
    }

}